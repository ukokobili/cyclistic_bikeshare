dmy("20-Jan-2021")
ymd(20210120)
ymd_hms("2021-01-20 20:11:59")
ymd_hms(today())
mdy_hm("01/20/2021 08:01")
as_date(now())
data.frame(x = c(1, 2, 3) , y = c(1.5, 5.5, 7.5))
file.create (“new_csv_file.csv”)
file.create(“new_csv_file.csv”)
file.create(“new_csv_file.csv”)
matrix(c(3:8), ncol = 2)
matrix(c(3:8), nrow = 2)
x <- 10
x > 3 & x < 12
x <- 20
x > 3 & x < 12
x <- 4
if (x > 0) {
print("x is a positive number")
}
x <- 7
x <- 7
if (x > 0) {
print ("x is a positive number")
} else {
print ("x is either a negative number or zero")
}
x <- -7
x <- 7
if (x > 0) {
print ("x is a positive number")
} else {
print ("x is either a negative number or zero")
}
x <- -7
>
> if (x > 0) {
+
+     print ("x is a positive number")
+
+ } else {
+
+     print ("x is either a negative number or zero")
+
+ }
x <- -7
if (x > 0) {
print("x is a positive number")
} else {
print ("x is either a negative number or zero")
}
x <- -1
if (x < 0) {
print("x is a negative number")
} else if (x == 0) {
print("x is zero")
} else {
print("x is a positive number")
}
x <- 1
if (x < 0) {
print("x is a negative number")
} else if (x == 0) {
print("x is zero")
} else {
print("x is a positive number")
}
x <- 0
if (x < 0) {
print("x is a negative number")
} else if (x == 0) {
print("x is zero")
} else {
print("x is a positive number")
}
library(tidyverse)
head(diamonds)
str(diamonds)
glimpse(diamonds)
colnames(diamonds)
rename(diamonds, carat_new = carat)
rename(diamonds, carat_new = carat, cut_new = cut)
summarize(diamonds, mean_carat = mean(carat))
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
facet_wrap(~cut)
install.packages()
library(tidyverse)
head(diamonds)
str(diamonds)
glimpse(diamonds)
colnames(diamonds)
rename(diamonds, carat_new = carat)
rename(diamonds, carat_new = carat, cut_new = cut)
summarize(diamonds, mean_carat = mean(carat))
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point()
ggplot(data = diamonds, aes(x = carat, y = price, color = cut)) +
geom_point() +
facet_wrap(~cut)
browseVignettes("ggplot2")
data()
data(mtcars)
mtcars
View(mtcars)
readr_example()
readr_example("mtcars.csv")
read_csv(readr_example("mtcars.csv"))
library(readxl)
readxl_example()
read_excel(readxl_example("type-me.xlsx"))
excel_sheets(readxl_example("type-me.xlsx"))
read_excel(readxl_example("type-me.xlsx"), sheet = "numeric_coercion")
install.packages("here")
install.packages("here")
install.packages("skimr")
install.packages('ggplot2')
install.packages('palmerpenguins')
library(ggplot2)
library(palmerpenguins)
data(penguins)
View(penguins)
ggplot(data = penguins) + geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
ggplot(data = penguins) + geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("tidyverse")
install.packages('RPostgreSQL')
install.packages(‘RPostgres’)
install.packages('devtools')
install.packages(‘remotes’)
library(tidyverse)  #helps wrangle data
library(lubridate)  #helps wrangle date attributes
library(ggplot2)  #helps visualize data
getwd() #displays your working directory
setwd("../OneDrive/projects/Capstone_Project") #sets directory
# Data collection
# Upload Divvy datasets (csv files) here
tripdata_202004 <- read_csv("202004_tripdata.csv")
tripdata_202005 <- read_csv("202005_tripdata.csv")
tripdata_202006 <- read_csv("202006_tripdata.csv")
tripdata_202007 <- read_csv("202007_tripdata.csv")
tripdata_202008 <- read_csv("202008_tripdata.csv")
tripdata_202009 <- read_csv("202009_tripdata.csv")
tripdata_202010 <- read_csv("202010_tripdata.csv")
tripdata_202011 <- read_csv("202011_tripdata.csv")
tripdata_202012 <- read_csv("202012_tripdata.csv")
tripdata_202101 <- read_csv("202101_tripdata.csv")
tripdata_202102 <- read_csv("202102_tripdata.csv")
tripdata_202103 <- read_csv("202103_tripdata.csv")
View(tripdata_202004)
colnames()
colnames()
colnames()
colnames()
colnames()
colnames()
colnames()
colnames()
colnames()
colnames()
colnames(tripdata_202004)
colnames(tripdata_202005)
colnames(tripdata_202006)
colnames(tripdata_202007)
colnames(tripdata_202008)
colnames(tripdata_202009)
colnames(tripdata_202010)
colnames(tripdata_202011)
colnames(tripdata_202012)
colnames(tripdata_202101)
colnames(tripdata_202102)
colnames(tripdata_202103)
(tripdata_202004 <- rename(tripdata_202004
,ride_id = trip_id
,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype))
(tripdata_202005 <- rename(tripdata_202005
,ride_id = trip_id
,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype))
(tripdata_202006 <- rename(tripdata_202006
,ride_id = trip_id
,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype))
(tripdata_202007 <- rename(tripdata_202007
,ride_id = trip_id
,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype))
(tripdata_202008 <- rename(tripdata_202008
,ride_id = trip_id
,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype))
(tripdata_202009 <- rename(tripdata_202009
,ride_id = trip_id
,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype))
(tripdata_202010 <- rename(tripdata_202010
,ride_id = trip_id
,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype))
(tripdata_202012 <- rename(tripdata_202012
,ride_id = trip_id
,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype))
(tripdata_202101 <- rename(tripdata_202101
,ride_id = trip_id
,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype))
(tripdata_202102 <- rename(tripdata_202102
,ride_id = trip_id
,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype))
(tripdata_202103 <- rename(tripdata_202103
,ride_id = trip_id
,rideable_type = bikeid
,started_at = start_time
,ended_at = end_time
,start_station_name = from_station_name
,start_station_id = from_station_id
,end_station_name = to_station_name
,end_station_id = to_station_id
,member_casual = usertype))
str(tripdata_202004)
str(tripdata_202005)
str(tripdata_202006)
str(tripdata_202007)
str(tripdata_202008)
str(tripdata_202009)
str(tripdata_202010)
str(tripdata_202011)
str(tripdata_202012)
str(tripdata_202101)
str(tripdata_202102)
str(tripdata_202103)
# Convert ride_id and rideable_type to character so that they can stack correctly
tripdata_202004 <-  mutate(tripdata_202004, ride_id = as.character(ride_id)
# Convert ride_id and rideable_type to character so that they can stack correctly
tripdata_202004 <-  mutate(tripdata_202004, ride_id = as.character(ride_id))
# Convert ride_id and rideable_type to character so that they can stack correctly
tripdata_202004 <-  mutate(tripdata_202004, ride_id = as.character(ride_id))
tripdata_202004 <-  mutate(tripdata_202004, ride_id = as.character(ride_id))
tripdata_202005 <-  mutate(tripdata_202005, ride_id = as.character(ride_id))
tripdata_202006 <-  mutate(tripdata_202006, ride_id = as.character(ride_id))
tripdata_202007 <-  mutate(tripdata_202007, ride_id = as.character(ride_id))
tripdata_202008 <-  mutate(tripdata_202008, ride_id = as.character(ride_id))
tripdata_202009 <-  mutate(tripdata_202009, ride_id = as.character(ride_id))
tripdata_202010 <-  mutate(tripdata_202010, ride_id = as.character(ride_id))
tripdata_202011 <-  mutate(tripdata_202011, ride_id = as.character(ride_id))
tripdata_202012 <-  mutate(tripdata_202012, ride_id = as.character(ride_id))
tripdata_202101 <-  mutate(tripdata_202101, ride_id = as.character(ride_id))
tripdata_202102 <-  mutate(tripdata_202102, ride_id = as.character(ride_id))
tripdata_202103 <-  mutate(tripdata_202103, ride_id = as.character(ride_id))
all_trips <- bind_rows(tripdata_202004, tripdata_202005, tripdata_202006,
tripdata_202007, tripdata_202008, tripdata_202009,
tripdata_202010, tripdata_202011, tripdata_202012,
tripdata_202102, tripdata_202102, tripdata_202103)
tripdata_202004 <-  mutate(tripdata_202004, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
tripdata_202005 <-  mutate(tripdata_202005, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
tripdata_202006 <-  mutate(tripdata_202006, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
tripdata_202007 <-  mutate(tripdata_202007, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
tripdata_202008 <-  mutate(tripdata_202008, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
tripdata_202009 <-  mutate(tripdata_202009, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
tripdata_202010 <-  mutate(tripdata_202010, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
tripdata_202011 <-  mutate(tripdata_202011, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
tripdata_202012 <-  mutate(tripdata_202012, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
tripdata_202101 <-  mutate(tripdata_202101, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
tripdata_202102 <-  mutate(tripdata_202102, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
tripdata_202103 <-  mutate(tripdata_202103, ride_id = as.character(ride_id)
,rideable_type = as.character(rideable_type))
# Convert start_at and end_at to character for 202004 to datetime
tripdata_202004 <-  mutate(tripdata_202004, started_at = as.POSIXct(started_at
,format = "%Y-%m-%d %H:%M:%S")
,ended_at = as.POSIXct(ended_at
,format = "%Y-%m-%d %H:%M:%S"))
# Stack individual data frames into one big data frame
all_trips <- bind_rows(tripdata_202004, tripdata_202005, tripdata_202006,
tripdata_202007, tripdata_202008, tripdata_202009,
tripdata_202010, tripdata_202011, tripdata_202012,
tripdata_202102, tripdata_202102, tripdata_202103)
# Convert start_station_id` and end_station_id from double to factor
tripdata_202004 <- mutate(start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202005 <- mutate(start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202006 <- mutate(start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202007 <- mutate(start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202008 <- mutate(start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202009 <- mutate(start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202010 <- mutate(start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202011 <- mutate(start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202012 <- mutate(start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202102 <- mutate(start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202103 <- mutate(start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
# Stack individual data frames into one big data frame
all_trips <- bind_rows(tripdata_202004, tripdata_202005, tripdata_202006,
tripdata_202007, tripdata_202008, tripdata_202009,
tripdata_202010, tripdata_202011, tripdata_202012,
tripdata_202102, tripdata_202102, tripdata_202103)
str(tripdata_202004)
str(tripdata_202005)
str(tripdata_202006)
str(tripdata_202007)
str(tripdata_202008)
str(tripdata_202009)
str(tripdata_202010)
str(tripdata_202011)
str(tripdata_202012)
str(tripdata_202101)
str(tripdata_202102)
str(tripdata_202103)
tripdata_202004 <- mutate(tripdata_202004, start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202005 <- mutate(tripdata_202005, start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202006 <- mutate(tripdata_202006, start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202007 <- mutate(tripdata_202007, start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202008 <- mutate(tripdata_202008, start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202009 <- mutate(tripdata_202009, start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202010 <- mutate(tripdata_202010, start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202011 <- mutate(tripdata_202011, start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202012 <- mutate(tripdata_202012, start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202102 <- mutate(tripdata_202102, start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
tripdata_202103 <- mutate(tripdata_202103, start_station_id = as.factor(start_station_id)
,end_station_id = as.factor(end_station_id))
# Stack individual data frames into one big data frame
all_trips <- bind_rows(tripdata_202004, tripdata_202005, tripdata_202006,
tripdata_202007, tripdata_202008, tripdata_202009,
tripdata_202010, tripdata_202011, tripdata_202012,
tripdata_202102, tripdata_202102, tripdata_202103)
all_trips <- all_trips %>%
select(-c(start_lat, start_lng, end_lat, end_lng))
# Data clean up and add data to prepare for analysis
# Inspect the new table that has been created
colnames(all_trips)  #List of column names
nrow(all_trips)  #How many rows are in data frame?
dim(all_trips)  #Dimensions of the data frame?
head(all_trips)  #See the first 6 rows of data frame.  Also tail(qs_raw)
str(all_trips)  #See list of columns and data types (numeric, character, etc)
summary(all_trips)  #Statistical summary of data. Mainly for numeric
# Add columns that list the date, month, day, and year of each ride
all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")
View(all_trips)
# Add a "ride_length" calculation to all_trips (in seconds)
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)
# Inspect the structure of the columns
str(all_trips)
# Convert "ride_length" from Factor to numeric so we can run calculations on the data
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)
all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]
View(all_trips_v2)
# Descriptive analysis
# Descriptive analysis on ride_length (all figures in seconds)
mean(all_trips_v2$ride_length) #straight average (total ride length / rides)
median(all_trips_v2$ride_length) #midpoint number in the ascending array of ride lengths
max(all_trips_v2$ride_length) #longest ride
# Descriptive analysis
# Descriptive analysis on ride_length (all figures in seconds)
mean(all_trips_v2$ride_length) #straight average (total ride length / rides)
median(all_trips_v2$ride_length) #midpoint number in the ascending array of ride lengths
max(all_trips_v2$ride_length) #longest ride
min(all_trips_v2$ride_length) #shortest ride
# You can condense the four lines above to one line using summary() on the specific attribute
summary(all_trips_v2$ride_length)
# Compare members and casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)
# See the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
# Notice that the days of the week are out of order. Let's fix that.
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
# See the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
# Notice that the days of the week are out of order. Let's fix that.
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
# Now, let's run the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
# analyze ridership data by type and weekday
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()
group_by(member_casual, weekday) %>%  #groups by usertype and weekday
summarise(number_of_rides = n()							#calculates the number of rides and average duration
,average_duration = mean(ride_length)) %>% 		# calculates the average duration
arrange(member_casual, weekday)								# sorts
# Let's visualize the number of rides by rider type
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
geom_col(position = "dodge")
# Let's create a visualization for average duration
all_trips_v2 %>%
mutate(weekday = wday(started_at, label = TRUE)) %>%
group_by(member_casual, weekday) %>%
summarise(number_of_rides = n()
,average_duration = mean(ride_length)) %>%
arrange(member_casual, weekday)  %>%
ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
geom_col(position = "dodge")
# Create a csv file that we will visualize in Excel, Tableau, or Power BI
counts <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
write.csv(counts, file = '/OneDrive/projects/Capstone_Project/avg_ride_length.csv')
write.csv(counts, file = '~/OneDrive/projects/Capstone_Project/avg_ride_length.csv')
write.csv(counts, '~/OneDrive/projects/Capstone_Project/avg_ride_length.csv', row.names = FALSE)
write.csv(counts, '../OneDrive/projects/Capstone_Project/avg_ride_length.csv', row.names = FALSE)
write.csv(counts, 'C:\Users\JACOB\OneDrive\projects\Capstone_Project\avg_ride_length.csv', row.names = FALSE)
write.csv(counts, '~OneDrive\projects\Capstone_Project\avg_ride_length.csv', row.names = FALSE)
write.csv(counts, '~\OneDrive\projects\Capstone_Project\avg_ride_length.csv', row.names = FALSE)
write.csv(counts, '..\OneDrive\projects\Capstone_Project\avg_ride_length.csv', row.names = FALSE)
write.csv(counts, '..\\OneDrive\\projects\\Capstone_Project\\avg_ride_length.csv', row.names = FALSE)
write_csv(counts, path = "avg_ride_length.csv")
